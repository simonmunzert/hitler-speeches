i=1
match_dat <- matchDatFunMatrix(i, "county_df_long")
dat_treated_unmatched <- match_dat$distance[match_dat$treated == TRUE & match_dat$matched == FALSE]
dat_treated_matched <- match_dat$distance[match_dat$treated == TRUE & match_dat$matched == TRUE & !is.na(match_dat$id_var_match)  & match_dat$id_var_match != -1]
dat_untreated_matched <- match_dat$distance_match[match_dat$treated == TRUE & match_dat$matched == TRUE & !is.na(match_dat$id_var_match) & match_dat$id_var_match != -1] # look out; treated == TRUE is correct because we look at distance_match variable!
dat_untreated_unmatched <- match_dat$distance[match_dat$treated == FALSE & match_dat$matched == FALSE & match_dat$buffer == 0]
View(match_dat)
str(model.out.list)
model.out.list[[1]]$X
dim(model.out.list)
dim(model.out.list[[1]]$X)
names(model.out.list[[1]]$X)
# function to create matching data frame
matchDatFunMatrix <- function(i, dat) {
if (dat == "county_pres_df_long") {
dat <- get(dat)
dat <- filter(dat, election == 7)
dat$election <- 6
rownames(dat) <- 1:nrow(dat)
}else if (dat == "community_df_long"){
dat <- get(dat)
dat <- filter(dat, election == 2)
dat$election <- 7
rownames(dat) <- 1:nrow(dat)
} else {
dat <- get(dat)
dat <- filter(dat, election == i+1)
rownames(dat) <- 1:nrow(dat)
}
match_dat <- data.frame(id_var = rownames(dat[dat$election == i+1,]), treated = model.out.list[[i]]$treat, discarded = model.out.list[[i]]$discarded, distance = model.out.list[[i]]$distance)
match_dat <- cbind(match_dat, model.out.list[[i]]$X)
# create buffer variable
treat_var <- model.out.list[[i]]$formula %>% char() %>% .[2]
buffer_var <- paste0(treat_var, "_nomatch")
match_dat$buffer <- dat[dat$election == i+1,][,buffer_var]
# create match matrix
match.matrix.full <- data.frame(id_var = c(rownames(model.out.list[[i]]$match.matrix), model.out.list[[i]]$match.matrix), id_var_match = c(model.out.list[[i]]$match.matrix, rownames(model.out.list[[i]]$match.matrix)))
# create id variable from matched observation
match_dat <- merge(match_dat, match.matrix.full, by = "id_var", all.x = TRUE)
match_dat$id_var <- num(char(match_dat$id_var))
match_dat <- arrange(match_dat, id_var)
# create distance variable of match
match_dat$distance_match <- NA
for (j in 1:nrow(match_dat)) {
id_match <- match_dat$id_var_match[j] %>% char() %>% num()
match_dat$distance_match[j] <- ifelse(id_match != -1, match_dat$distance[match_dat$id_var == id_match], NA)
}
# create matched variable
match_dat$matched <- !is.na(match_dat$distance_match)
# return df
return(match_dat)
}
match_dat <- matchDatFunMatrix(i, "county_df_long")
names(match_dat)
# plot propensity scores by matching and treatment status
pdf(file="../figures/propscores_jitterplot-control-no-prev-visit.pdf", height=6, width=8, family="URWTimes")
par(oma=c(0,0,1,0))
#layout(matrix(c(1,2,3,4,5), 1, 5, byrow = TRUE), widths=c(1.15, 1, 1, 1, 1), heights=c(2, 2, 2, 2, 2))
layout(matrix(c(1,2,3,4,5,6), 2, 3, byrow = TRUE), widths=c(1.15, 1, 1), heights=c(2, 2))
election_names <- c("Sep 1930\n", "Jul 1932\n", "Nov 1932\n", "Mar 1933\n", "Apr 1932 (P)\n", "Sep 1930 (mun.)\n")
for (i in c(1, 6, 5, 2, 3, 4)) {
if (i %in% c(3, 4, 5, 6)) {par(mar=c(6,.5,2,.5)) }
if (i %in% c(1, 2)) {par(mar=c(6,4,2,.5)) }
if (i %in% c(1:4)) {
match_dat <- matchDatFunMatrix(i, "county_df_long")
}else if (i == 5){ match_dat <- matchDatFunMatrix(i, "county_pres_df_long")
}else {match_dat <- matchDatFunMatrix(i, "community_df_long")}
dat_treated_unmatched <- match_dat$distance[match_dat$treated == TRUE & match_dat$matched == FALSE]
dat_treated_matched <- match_dat$distance[match_dat$treated == TRUE & match_dat$matched == TRUE & !is.na(match_dat$id_var_match)  & match_dat$id_var_match != -1]
dat_untreated_matched <- match_dat$distance_match[match_dat$treated == TRUE & match_dat$matched == TRUE & !is.na(match_dat$id_var_match) & match_dat$id_var_match != -1] # look out; treated == TRUE is correct because we look at distance_match variable!
dat_untreated_unmatched <- match_dat$distance[match_dat$treated == FALSE & match_dat$matched == FALSE & match_dat$buffer == 0]
set.seed(123)
dat_treated_unmatched_x <- rnorm(length(dat_treated_unmatched), 0, .02)
dat_treated_matched_x <- rnorm(length(dat_treated_matched), 1, .02)
dat_untreated_matched_x <- rnorm(length(dat_untreated_matched), 2, .02)
dat_untreated_unmatched_x <- rnorm(length(dat_untreated_unmatched), 3, .02)
n_groups <- c(match_dat %>% filter(treated == 1, matched == 0) %>% .$id_var %>% unique() %>% length(),
match_dat %>% filter(treated == 1, matched == 1) %>% .$id_var %>% unique() %>% length(),
match_dat %>% filter(treated == 0, matched == 1) %>% .$id_var %>% unique() %>% length(),
match_dat %>% filter(treated == 0, matched == 0, buffer == 0) %>% .$id_var %>% unique() %>% length())
if(i == 1 | i == 2) {
plot(dat_treated_unmatched_x, dat_treated_unmatched, xlim = c(-.25,3.25), ylim = c(0,1), pch = 20, col = rgb(.1,.1,.1, .3), xaxt = "n", xlab = "", ylab ="Propensity score", main = election_names[i]) }else{
plot(dat_treated_unmatched_x, dat_treated_unmatched, xlim = c(-.25,3.25), ylim = c(0,1), pch = 20, col = rgb(.1,.1,.1, .3), xaxt = "n", yaxt = "n", xlab = "", ylab ="", main = election_names[i])
}
points(dat_treated_matched_x, dat_treated_matched, pch = 20, col = rgb(.1,.1,.1, .3))
points(dat_untreated_matched_x, dat_untreated_matched, pch = 20, col = rgb(.1,.1,.1, .3))
points(dat_untreated_unmatched_x, dat_untreated_unmatched, pch = 20, col = rgb(.1,.1,.1, .3))
axis(1, at = c(0,1,2,3), labels = c("Unmatched,", "Matched,", "Matched,", "Unmatched,"), line = 0, tick = FALSE)
axis(1, at = c(0,1,2,3), labels = c("treated", "treated", "control", "control"), line = 1, tick = FALSE)
axis(1, at = c(0,1,2,3), labels = paste0("(n = ", n_groups, ")"), line = 2, tick = FALSE)
arrows(x0 = dat_treated_matched_x, y0 = dat_treated_matched, x1 = dat_untreated_matched_x, y1 = dat_untreated_matched, length = 0)
abline(h=seq(0,1,.2),lty = 5, lwd = 1, col = "darkgrey")
}
dev.off()
i
## load packages and functions -------------------
source("packages.r")
source("functions.r")
source("functions-analysis.r")
## import prepared data --------------------------
load("county_df_pointdata_long.RData")
load("county_pres_df_pointdata_long.RData")
load("community_df_pointdata_long.RData")
varnames_tab <- read.csv("varnames_labels.csv", stringsAsFactors = FALSE, sep = ",")
# NEW IN THIS SCRIPT: exclude controls with previous Hitler or current Goebbels visit
# NOTE: does not work for presidential election 1932; hardly any plausible controls available since Hitler only visits places he had visited before
## estimate propensity score models + matching -----------------------
# 1:1 matching, Reichstag elections
model.out.list <- list()
model.out.probit.list <- list()
match.data.list <- list()
covar_names <- c("wkr_comp_last", "wkv_comp_last", "memberst", "airfields_dist_min100km", "wbht", "l_p_nsdap", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names, collapse=" + "), sep = "") %>% as.formula
set.seed(42)
for (i in 1:4) {
dat_ps <- county_df_long[county_df_long$election == i+1,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.list[[i]] <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest", # NN matching
m.order = "random", # matches in random order
ratio = 1, # 1:1 matching
caliper = .25, # .25 standard deviations of the distance measure within which to draw control units
replace = FALSE, # control unit can be matched to more than one treated unit
discard = "none", # no units (treated and control) that are outside the support  will be discarded.
exact = "visit_10km_nomatch", # introduce matching buffer zone
distance = "probit") # probit distance measure
model.out.probit.list[[i]] <- model.out.list[[i]]$model
match.data.list[[i]] <- match.data(model.out.list[[i]])
match.data.list[[i]] <- filter(match.data.list[[i]], visit_10km == 1 | (visit_10km == 0 & l_visit_10km == 0 & goebbels_10km == 0)) # NEW IN THIS SCRIPT: exclude controls with previous Hitler or current Goebbels visit
#print(summary(model.out.list[[i]]))
print(model.out.list[[i]]$nn)
}
# 1:1 matching, presidential election
covar_names_pres <- c( "memberst", "airfields_dist_min100km", "wbht", "l_p_hitl", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names_pres, collapse=" + "),sep = "") %>% as.formula
set.seed(42)
dat_ps <- county_pres_df_long[county_pres_df_long$election == 7,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.pres <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest",
m.order = "random",
ratio = 1,
caliper = .25,
replace = FALSE,
discard = "none",
exact = "visit_10km_nomatch",
distance = "probit")
model.out.probit.pres <- model.out.pres$model
match.data.pres <- match.data(model.out.pres)
#print(summary(model.out.pres))
print(model.out.pres$nn)
# 1:1 matching, 1930 Reichstag election, community-level data
covar_names <- c("wkr_comp_last", "wkv_comp_last", "memberst", "airfields_dist_min100km", "wbht", "l_p_nsdap", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names, collapse=" + "),sep = "") %>% as.formula
set.seed(42)
dat_ps <- community_df_long[community_df_long$election == 2,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.comm <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest",
m.order = "random",
ratio = 1,
caliper = .25,
replace = FALSE,
discard = "none",
exact = "visit_10km_nomatch",
distance = "probit")
model.out.probit.comm <- model.out.comm$model
match.data.comm <- match.data(model.out.comm)
match.data.comm <- filter(match.data.comm, visit_10km == 1 | (visit_10km == 0 & l_visit_10km == 0 & goebbels_10km == 0)) # exclude controls with previous Hitler or current Goebbels visit
#print(summary(model.out.comm))
print(model.out.comm$nn)
table(match.data.comm$visit_10km, match.data.comm$l_visit_10km)
## table: probit models -------------
model.out.list[[5]] <- model.out.pres
model.out.list[[6]] <- model.out.comm
## visualize propensity scores -----------------
# plot propensity scores by matching and treatment status
pdf(file="../figures/propscores_jitterplot-control-no-prev-visit.pdf", height=6, width=8, family="URWTimes")
par(oma=c(0,0,1,0))
#layout(matrix(c(1,2,3,4,5), 1, 5, byrow = TRUE), widths=c(1.15, 1, 1, 1, 1), heights=c(2, 2, 2, 2, 2))
layout(matrix(c(1,2,3,4,5,6), 2, 3, byrow = TRUE), widths=c(1.15, 1, 1), heights=c(2, 2))
election_names <- c("Sep 1930\n", "Jul 1932\n", "Nov 1932\n", "Mar 1933\n", "Apr 1932 (P)\n", "Sep 1930 (mun.)\n")
for (i in c(1, 6, 5, 2, 3, 4)) {
if (i %in% c(3, 4, 5, 6)) {par(mar=c(6,.5,2,.5)) }
if (i %in% c(1, 2)) {par(mar=c(6,4,2,.5)) }
if (i %in% c(1:4)) {
match_dat <- matchDatFunMatrix(i, "county_df_long")
}else if (i == 5){ match_dat <- matchDatFunMatrix(i, "county_pres_df_long")
}else {match_dat <- matchDatFunMatrix(i, "community_df_long")}
dat_treated_unmatched <- match_dat$distance[match_dat$treated == TRUE & match_dat$matched == FALSE]
dat_treated_matched <- match_dat$distance[match_dat$treated == TRUE & match_dat$matched == TRUE & !is.na(match_dat$id_var_match)  & match_dat$id_var_match != -1]
dat_untreated_matched <- match_dat$distance_match[match_dat$treated == TRUE & match_dat$matched == TRUE & !is.na(match_dat$id_var_match) & match_dat$id_var_match != -1] # look out; treated == TRUE is correct because we look at distance_match variable!
dat_untreated_unmatched <- match_dat$distance[match_dat$treated == FALSE & match_dat$matched == FALSE & match_dat$buffer == 0]
set.seed(123)
dat_treated_unmatched_x <- rnorm(length(dat_treated_unmatched), 0, .02)
dat_treated_matched_x <- rnorm(length(dat_treated_matched), 1, .02)
dat_untreated_matched_x <- rnorm(length(dat_untreated_matched), 2, .02)
dat_untreated_unmatched_x <- rnorm(length(dat_untreated_unmatched), 3, .02)
n_groups <- c(match_dat %>% filter(treated == 1, matched == 0) %>% .$id_var %>% unique() %>% length(),
match_dat %>% filter(treated == 1, matched == 1) %>% .$id_var %>% unique() %>% length(),
match_dat %>% filter(treated == 0, matched == 1) %>% .$id_var %>% unique() %>% length(),
match_dat %>% filter(treated == 0, matched == 0, buffer == 0) %>% .$id_var %>% unique() %>% length())
if(i == 1 | i == 2) {
plot(dat_treated_unmatched_x, dat_treated_unmatched, xlim = c(-.25,3.25), ylim = c(0,1), pch = 20, col = rgb(.1,.1,.1, .3), xaxt = "n", xlab = "", ylab ="Propensity score", main = election_names[i]) }else{
plot(dat_treated_unmatched_x, dat_treated_unmatched, xlim = c(-.25,3.25), ylim = c(0,1), pch = 20, col = rgb(.1,.1,.1, .3), xaxt = "n", yaxt = "n", xlab = "", ylab ="", main = election_names[i])
}
points(dat_treated_matched_x, dat_treated_matched, pch = 20, col = rgb(.1,.1,.1, .3))
points(dat_untreated_matched_x, dat_untreated_matched, pch = 20, col = rgb(.1,.1,.1, .3))
points(dat_untreated_unmatched_x, dat_untreated_unmatched, pch = 20, col = rgb(.1,.1,.1, .3))
axis(1, at = c(0,1,2,3), labels = c("Unmatched,", "Matched,", "Matched,", "Unmatched,"), line = 0, tick = FALSE)
axis(1, at = c(0,1,2,3), labels = c("treated", "treated", "control", "control"), line = 1, tick = FALSE)
axis(1, at = c(0,1,2,3), labels = paste0("(n = ", n_groups, ")"), line = 2, tick = FALSE)
arrows(x0 = dat_treated_matched_x, y0 = dat_treated_matched, x1 = dat_untreated_matched_x, y1 = dat_untreated_matched, length = 0)
abline(h=seq(0,1,.2),lty = 5, lwd = 1, col = "darkgrey")
}
dev.off()
dat_untreated_discarded <- match_dat$visit_10km == 0 & (match_dat$l_visit_10km == 1 | match_dat$goebbels_10km == 1)
dat_untreated_discarded
names(match_dat)
i
i=1
match_dat <- matchDatFunMatrix(i, "county_df_long")
dat_treated_unmatched <- match_dat$distance[match_dat$treated == TRUE & match_dat$matched == FALSE]
dat_treated_matched <- match_dat$distance[match_dat$treated == TRUE & match_dat$matched == TRUE & !is.na(match_dat$id_var_match)  & match_dat$id_var_match != -1]
dat_untreated_matched <- match_dat$distance_match[match_dat$treated == TRUE & match_dat$matched == TRUE & !is.na(match_dat$id_var_match) & match_dat$id_var_match != -1] # look out; treated == TRUE is correct because we look at distance_match variable!
dat_untreated_unmatched <- match_dat$distance[match_dat$treated == FALSE & match_dat$matched == FALSE & match_dat$buffer == 0]
dat_untreated_discarded <- match_dat$visit_10km == 0 & (match_dat$l_visit_10km == 1 | match_dat$goebbels_10km == 1)
dat_untreated_discarded
names(match_dat)
table(match_dat$treated)
dat_untreated_discarded <- match_dat$treated == 0 & (match_dat$l_visit_10km == 1 | match_dat$goebbels_10km == 1)
table(dat_untreated_discarded)
dat_untreated_discarded
i
table(match_dat$treated == 0 )
table(match_dat$l_visit_10km == 1)
dat_untreated_discarded <- match_dat$treated == 0 & (match_dat$l_visit_10km == 1 | match_dat$goebbels_10kmTRUE == 1)
dat_untreated_discarded
table(dat_untreated_discarded)
names(match_dat)
dat_untreated_discarded <- match_dat$treated == 0 & match_dat$matched == 1 & (match_dat$l_visit_10km == 1 | match_dat$goebbels_10kmTRUE == 1)
table(dat_untreated_discarded)
dat_treated_matched
dat_untreated_matched
dat_untreated_discarded <- dat_untreated_matched[match_dat$treated == 0 & match_dat$matched == 1 & (match_dat$l_visit_10km == 1 | match_dat$goebbels_10kmTRUE == 1)]
dat_untreated_discarded
match_dat$treated == 0 & match_dat$matched == 1 & (match_dat$l_visit_10km == 1 | match_dat$goebbels_10kmTRUE == 1)
dat_untreated_matched
names(match_dat)
dat_untreated_discarded <- match_dat$distance[match_dat$treated == 0 & match_dat$matched == 1 & (match_dat$l_visit_10km == 1 | match_dat$goebbels_10kmTRUE == 1)]
dat_untreated_discarded
unique(dat_untreated_discarded)
dat_untreated_matched
# model NSDAP vote share
model_voteshare_formula_simple <- paste("p_nsdap ~ time + exposure + timeXexposure",sep = "") %>% as.formula
model_voteshare_fullsample_simple <- list()
model_voteshare_matched_simple <- list()
for (i in 1:4) {
# full sample, lm simple model with voting population weights (i.e., only number of voters is considered)
dat_full <- getDatFull("county_df_long", election = i+1, treatment = "visit_10km")
model_voteshare_fullsample_simple[[i]] <- lm(model_voteshare_formula_simple, data =  dat_full, weights = dat_full$gs)
model_voteshare_fullsample_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_fullsample_simple[[i]], dat_full$lfnr)
# 1:1 matching, lm simple model with voting population weights * matching weights
dat_match <- match.data.list[[i]]
dat_match <- getDatMatch(dat.match = "dat_match", dat.orig = "county_df_long", election = i+1, treatment = "visit_10km")
dat_match$weights <- rep(dat_match$weights[!is.na(dat_match$weights)], 2)
dat_match$combweights <- dat_match$gs  * dat_match$weights
model_voteshare_matched_simple[[i]] <- lm(model_voteshare_formula_simple, data =  dat_match, weights = dat_match$combweights)
model_voteshare_matched_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_matched_simple[[i]], dat_match$lfnr)
}
c("county_df_pointdata_long.RData",
"county_pres_df_pointdata_long.RData",
"community_df_pointdata_long.RData")
## exports
c()
## load packages and functions -------------------
source("packages.r")
source("functions.r")
source("functions-analysis.r")
## import prepared data --------------------------
load("county_df_pointdata_long.RData")
load("county_pres_df_pointdata_long.RData")
load("community_df_pointdata_long.RData")
varnames_tab <- read.csv("varnames_labels.csv", stringsAsFactors = FALSE, sep = ",")
# NEW IN THIS SCRIPT: exclude controls with previous Hitler or current Goebbels visit
# NOTE: does not work for presidential election 1932; hardly any plausible controls available since Hitler only visits places he had visited before
## estimate propensity score models + matching -----------------------
# 1:1 matching, Reichstag elections
model.out.list <- list()
model.out.probit.list <- list()
match.data.list <- list()
covar_names <- c("wkr_comp_last", "wkv_comp_last", "memberst", "airfields_dist_min100km", "wbht", "l_p_nsdap", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names, collapse=" + "), sep = "") %>% as.formula
set.seed(42)
for (i in 1:4) {
dat_ps <- county_df_long[county_df_long$election == i+1,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.list[[i]] <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest", # NN matching
m.order = "random", # matches in random order
ratio = 1, # 1:1 matching
caliper = .25, # .25 standard deviations of the distance measure within which to draw control units
replace = FALSE, # control unit can be matched to more than one treated unit
discard = "none", # no units (treated and control) that are outside the support  will be discarded.
exact = "visit_10km_nomatch", # introduce matching buffer zone
distance = "probit") # probit distance measure
model.out.probit.list[[i]] <- model.out.list[[i]]$model
match.data.list[[i]] <- match.data(model.out.list[[i]])
match.data.list[[i]] <- filter(match.data.list[[i]], visit_10km == 1 | (visit_10km == 0 & l_visit_10km == 0 & goebbels_10km == 0)) # NEW IN THIS SCRIPT: exclude controls with previous Hitler or current Goebbels visit
#print(summary(model.out.list[[i]]))
print(model.out.list[[i]]$nn)
}
# 1:1 matching, presidential election
covar_names_pres <- c( "memberst", "airfields_dist_min100km", "wbht", "l_p_hitl", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names_pres, collapse=" + "),sep = "") %>% as.formula
set.seed(42)
dat_ps <- county_pres_df_long[county_pres_df_long$election == 7,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.pres <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest",
m.order = "random",
ratio = 1,
caliper = .25,
replace = FALSE,
discard = "none",
exact = "visit_10km_nomatch",
distance = "probit")
model.out.probit.pres <- model.out.pres$model
match.data.pres <- match.data(model.out.pres)
#print(summary(model.out.pres))
print(model.out.pres$nn)
# 1:1 matching, 1930 Reichstag election, community-level data
covar_names <- c("wkr_comp_last", "wkv_comp_last", "memberst", "airfields_dist_min100km", "wbht", "l_p_nsdap", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names, collapse=" + "),sep = "") %>% as.formula
set.seed(42)
dat_ps <- community_df_long[community_df_long$election == 2,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.comm <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest",
m.order = "random",
ratio = 1,
caliper = .25,
replace = FALSE,
discard = "none",
exact = "visit_10km_nomatch",
distance = "probit")
model.out.probit.comm <- model.out.comm$model
match.data.comm <- match.data(model.out.comm)
match.data.comm <- filter(match.data.comm, visit_10km == 1 | (visit_10km == 0 & l_visit_10km == 0 & goebbels_10km == 0)) # exclude controls with previous Hitler or current Goebbels visit
#print(summary(model.out.comm))
print(model.out.comm$nn)
table(match.data.comm$visit_10km, match.data.comm$l_visit_10km)
## table: probit models -------------
model.out.list[[5]] <- model.out.pres
model.out.list[[6]] <- model.out.comm
# model NSDAP vote share
model_voteshare_formula_simple <- paste("p_nsdap ~ time + exposure + timeXexposure",sep = "") %>% as.formula
model_voteshare_fullsample_simple <- list()
model_voteshare_matched_simple <- list()
for (i in 1:4) {
# full sample, lm simple model with voting population weights (i.e., only number of voters is considered)
dat_full <- getDatFull("county_df_long", election = i+1, treatment = "visit_10km")
model_voteshare_fullsample_simple[[i]] <- lm(model_voteshare_formula_simple, data =  dat_full, weights = dat_full$gs)
model_voteshare_fullsample_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_fullsample_simple[[i]], dat_full$lfnr)
# 1:1 matching, lm simple model with voting population weights * matching weights
dat_match <- match.data.list[[i]]
dat_match <- getDatMatch(dat.match = "dat_match", dat.orig = "county_df_long", election = i+1, treatment = "visit_10km")
dat_match$weights <- rep(dat_match$weights[!is.na(dat_match$weights)], 2)
dat_match$combweights <- dat_match$gs  * dat_match$weights
model_voteshare_matched_simple[[i]] <- lm(model_voteshare_formula_simple, data =  dat_match, weights = dat_match$combweights)
model_voteshare_matched_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_matched_simple[[i]], dat_match$lfnr)
}
i
# full sample, lm simple model with voting population weights (i.e., only number of voters is considered)
dat_full <- getDatFull("county_df_long", election = i+1, treatment = "visit_10km")
model_voteshare_fullsample_simple[[i]] <- lm(model_voteshare_formula_simple, data =  dat_full, weights = dat_full$gs)
model_voteshare_fullsample_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_fullsample_simple[[i]], dat_full$lfnr)
# 1:1 matching, lm simple model with voting population weights * matching weights
dat_match <- match.data.list[[i]]
dat_match <- getDatMatch(dat.match = "dat_match", dat.orig = "county_df_long", election = i+1, treatment = "visit_10km")
dat_match$weights <- rep(dat_match$weights[!is.na(dat_match$weights)], 2)
dat_match
# model KPD vote share
model_voteshare_kpd_formula_simple <- paste("p_kpd ~ time + exposure + timeXexposure",sep = "") %>% as.formula
model_voteshare_kpd_fullsample_simple <- list()
model_voteshare_kpd_matched_simple <- list()
for (i in 1:4) {
# full sample, lm simple model with voting population weights (i.e., only number of voters is considered)
dat_full <- getDatFull("county_df_long", election = i+1, treatment = "visit_10km")
model_voteshare_kpd_fullsample_simple[[i]] <- lm(model_voteshare_kpd_formula_simple, data =  dat_full, weights = dat_full$gs)
model_voteshare_kpd_fullsample_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_kpd_fullsample_simple[[i]], dat_full$lfnr)
# 1:1 matching, lm simple model with voting population weights * matching weights
dat_match <- match.data.list[[i]]
dat_match <- getDatMatch(dat.match = "dat_match", dat.orig = "county_df_long", election = i+1, treatment = "visit_10km")
dat_match$weights <- rep(dat_match$weights[!is.na(dat_match$weights)], 2)
dat_match$combweights <- dat_match$gs  * dat_match$weights
model_voteshare_kpd_matched_simple[[i]] <- lm(model_voteshare_kpd_formula_simple, data =  dat_match, weights = dat_match$combweights)
model_voteshare_kpd_matched_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_kpd_matched_simple[[i]], dat_match$lfnr)
}
## imports
c("county_df_pointdata_long.RData",
"county_pres_df_pointdata_long.RData",
"community_df_pointdata_long.RData")
## exports
c()
## load packages and functions -------------------
source("packages.r")
source("functions.r")
source("functions-analysis.r")
## import prepared data --------------------------
load("county_df_pointdata_long.RData")
load("county_pres_df_pointdata_long.RData")
load("community_df_pointdata_long.RData")
varnames_tab <- read.csv("varnames_labels.csv", stringsAsFactors = FALSE, sep = ",")
# NEW IN THIS SCRIPT: exclude controls with previous Hitler or current Goebbels visit
# NOTE: does not work for presidential election 1932; hardly any plausible controls available since Hitler only visits places he had visited before
## estimate propensity score models + matching -----------------------
# 1:1 matching, Reichstag elections
model.out.list <- list()
model.out.probit.list <- list()
match.data.list <- list()
covar_names <- c("wkr_comp_last", "wkv_comp_last", "memberst", "airfields_dist_min100km", "wbht", "l_p_nsdap", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names, collapse=" + "), sep = "") %>% as.formula
set.seed(42)
for (i in 1:4) {
dat_ps <- county_df_long[county_df_long$election == i+1,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.list[[i]] <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest", # NN matching
m.order = "random", # matches in random order
ratio = 1, # 1:1 matching
caliper = .25, # .25 standard deviations of the distance measure within which to draw control units
replace = FALSE, # control unit can be matched to more than one treated unit
discard = "none", # no units (treated and control) that are outside the support  will be discarded.
exact = "visit_10km_nomatch", # introduce matching buffer zone
distance = "probit") # probit distance measure
model.out.probit.list[[i]] <- model.out.list[[i]]$model
match.data.list[[i]] <- match.data(model.out.list[[i]])
#match.data.list[[i]] <- filter(match.data.list[[i]], visit_10km == 1 | (visit_10km == 0 & l_visit_10km == 0 & goebbels_10km == 0)) # NEW IN THIS SCRIPT: exclude controls with previous Hitler or current Goebbels visit
#print(summary(model.out.list[[i]]))
print(model.out.list[[i]]$nn)
}
# 1:1 matching, presidential election
covar_names_pres <- c( "memberst", "airfields_dist_min100km", "wbht", "l_p_hitl", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names_pres, collapse=" + "),sep = "") %>% as.formula
set.seed(42)
dat_ps <- county_pres_df_long[county_pres_df_long$election == 7,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.pres <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest",
m.order = "random",
ratio = 1,
caliper = .25,
replace = FALSE,
discard = "none",
exact = "visit_10km_nomatch",
distance = "probit")
model.out.probit.pres <- model.out.pres$model
match.data.pres <- match.data(model.out.pres)
#print(summary(model.out.pres))
print(model.out.pres$nn)
# 1:1 matching, 1930 Reichstag election, community-level data
covar_names <- c("wkr_comp_last", "wkv_comp_last", "memberst", "airfields_dist_min100km", "wbht", "l_p_nsdap", "l_visit_10km", "goebbels_10km")
model_formula <- paste("visit_10km ~ ", paste(covar_names, collapse=" + "),sep = "") %>% as.formula
set.seed(42)
dat_ps <- community_df_long[community_df_long$election == 2,]
rownames(dat_ps) <- 1:nrow(dat_ps)
model.out.comm <- matchit(formula = model_formula,
data = dat_ps,
method = "nearest",
m.order = "random",
ratio = 1,
caliper = .25,
replace = FALSE,
discard = "none",
exact = "visit_10km_nomatch",
distance = "probit")
model.out.probit.comm <- model.out.comm$model
match.data.comm <- match.data(model.out.comm)
#match.data.comm <- filter(match.data.comm, visit_10km == 1 | (visit_10km == 0 & l_visit_10km == 0 & goebbels_10km == 0)) # exclude controls with previous Hitler or current Goebbels visit
#print(summary(model.out.comm))
print(model.out.comm$nn)
table(match.data.comm$visit_10km, match.data.comm$l_visit_10km)
## table: probit models -------------
model.out.list[[5]] <- model.out.pres
model.out.list[[6]] <- model.out.comm
# model NSDAP vote share
model_voteshare_formula_simple <- paste("p_nsdap ~ time + exposure + timeXexposure",sep = "") %>% as.formula
model_voteshare_fullsample_simple <- list()
model_voteshare_matched_simple <- list()
for (i in 1:4) {
# full sample, lm simple model with voting population weights (i.e., only number of voters is considered)
dat_full <- getDatFull("county_df_long", election = i+1, treatment = "visit_10km")
model_voteshare_fullsample_simple[[i]] <- lm(model_voteshare_formula_simple, data =  dat_full, weights = dat_full$gs)
model_voteshare_fullsample_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_fullsample_simple[[i]], dat_full$lfnr)
# 1:1 matching, lm simple model with voting population weights * matching weights
dat_match <- match.data.list[[i]]
dat_match <- getDatMatch(dat.match = "dat_match", dat.orig = "county_df_long", election = i+1, treatment = "visit_10km")
dat_match$weights <- rep(dat_match$weights[!is.na(dat_match$weights)], 2)
dat_match$combweights <- dat_match$gs  * dat_match$weights
model_voteshare_matched_simple[[i]] <- lm(model_voteshare_formula_simple, data =  dat_match, weights = dat_match$combweights)
model_voteshare_matched_simple[[i]]$clusterse <- runClusterRobustOLS(model_voteshare_matched_simple[[i]], dat_match$lfnr)
}
dat_match$weights
